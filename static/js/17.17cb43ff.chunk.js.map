{"version":3,"sources":["../node_modules/@ionic/core/dist/esm/ion-reorder_2.entry.js","../node_modules/@ionic/core/dist/esm/haptic-27b3f981.js"],"names":["Reorder","hostRef","registerInstance","this","ev","reorderGroup","el","closest","preventDefault","disabled","stopImmediatePropagation","mode","getIonMode","reorderIcon","h","Host","class","name","lazy","part","getElement","style","ios","md","ReorderGroup","ionItemReorder","createEvent","lastToIndex","cachedHeights","scrollElTop","scrollElBottom","scrollElInitial","containerTop","containerBottom","state","gesture","enable","contentEl","getScrollElement","scrollEl","createGesture","gestureName","gesturePriority","threshold","direction","passive","canStart","detail","onStart","onMove","onEnd","disabledChanged","destroy","undefined","listOrReorder","Promise","resolve","completeSync","selectedItemEl","reorderEl","event","target","item","findReorderItem","data","heights","length","children","sum","i","child","offsetHeight","push","$ionIndex","box","getBoundingClientRect","top","bottom","scrollBox","scrollTop","AUTO_SCROLL_MARGIN","indexForItem","selectedItemHeight","classList","add","ITEM_REORDER_SELECTED","hapticSelectionStart","selectedItem","scroll","autoscroll","currentY","Math","max","min","deltaY","startY","normalizedY","toIndex","itemIndexForTop","fromIndex","hapticSelectionChanged","reorderMove","transform","emit","from","to","complete","bind","hapticSelectionEnd","len","ref","insertBefore","Array","isArray","reorderArray","transition","remove","itemHeight","value","posY","amount","SCROLL_JUMP","scrollBy","element","node","container","parent","parentElement","array","splice","slice","HapticEngine","getEngine","win","window","TapticEngine","Capacitor","isPluginAvailable","Plugins","Haptics","available","isCordova","isCapacitor","impact","options","engine","toUpperCase","notification","selection","selectionStart","gestureSelectionStart","selectionChanged","gestureSelectionChanged","selectionEnd","gestureSelectionEnd","hapticSelection","hapticImpact"],"mappings":"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","file":"static/js/17.17cb43ff.chunk.js","sourcesContent":["import { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-e806d1f6.js';\nimport { b as getIonMode } from './ionic-global-9d5c8ee3.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-27b3f981.js';\n\nconst reorderIosCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:34px;opacity:0.4}\";\n\nconst reorderMdCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:31px;opacity:0.3}\";\n\nconst Reorder = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  onClick(ev) {\n    const reorderGroup = this.el.closest('ion-reorder-group');\n    ev.preventDefault();\n    // Only stop event propagation if the reorder is inside of an enabled\n    // reorder group. This allows interaction with clickable children components.\n    if (!reorderGroup || !reorderGroup.disabled) {\n      ev.stopImmediatePropagation();\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    const reorderIcon = mode === 'ios' ? 'reorder-three-outline' : 'reorder-two-sharp';\n    return (h(Host, { class: mode }, h(\"slot\", null, h(\"ion-icon\", { name: reorderIcon, lazy: false, class: \"reorder-icon\", part: \"icon\" }))));\n  }\n  get el() { return getElement(this); }\n};\nReorder.style = {\n  ios: reorderIosCss,\n  md: reorderMdCss\n};\n\nconst reorderGroupCss = \".reorder-list-active>*{-webkit-transition:-webkit-transform 300ms;transition:-webkit-transform 300ms;transition:transform 300ms;transition:transform 300ms, -webkit-transform 300ms;will-change:transform}.reorder-enabled{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.reorder-enabled ion-reorder{display:block;cursor:-webkit-grab;cursor:grab;pointer-events:all;-ms-touch-action:none;touch-action:none}.reorder-selected,.reorder-selected ion-reorder{cursor:-webkit-grabbing;cursor:grabbing}.reorder-selected{position:relative;-webkit-transition:none !important;transition:none !important;-webkit-box-shadow:0 0 10px rgba(0, 0, 0, 0.4);box-shadow:0 0 10px rgba(0, 0, 0, 0.4);opacity:0.8;z-index:100}.reorder-visible ion-reorder .reorder-icon{-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0)}\";\n\nconst ReorderGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionItemReorder = createEvent(this, \"ionItemReorder\", 7);\n    this.lastToIndex = -1;\n    this.cachedHeights = [];\n    this.scrollElTop = 0;\n    this.scrollElBottom = 0;\n    this.scrollElInitial = 0;\n    this.containerTop = 0;\n    this.containerBottom = 0;\n    this.state = 0 /* Idle */;\n    /**\n     * If `true`, the reorder will be hidden.\n     */\n    this.disabled = true;\n  }\n  disabledChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.disabled);\n    }\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (contentEl) {\n      this.scrollEl = await contentEl.getScrollElement();\n    }\n    this.gesture = (await import('./index-f49d994d.js')).createGesture({\n      el: this.el,\n      gestureName: 'reorder',\n      gesturePriority: 110,\n      threshold: 0,\n      direction: 'y',\n      passive: false,\n      canStart: detail => this.canStart(detail),\n      onStart: ev => this.onStart(ev),\n      onMove: ev => this.onMove(ev),\n      onEnd: () => this.onEnd(),\n    });\n    this.disabledChanged();\n  }\n  disconnectedCallback() {\n    this.onEnd();\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n  }\n  /**\n   * Completes the reorder operation. Must be called by the `ionItemReorder` event.\n   *\n   * If a list of items is passed, the list will be reordered and returned in the\n   * proper order.\n   *\n   * If no parameters are passed or if `true` is passed in, the reorder will complete\n   * and the item will remain in the position it was dragged to. If `false` is passed,\n   * the reorder will complete and the item will bounce back to its original position.\n   *\n   * @param listOrReorder A list of items to be sorted and returned in the new order or a\n   * boolean of whether or not the reorder should reposition the item.\n   */\n  complete(listOrReorder) {\n    return Promise.resolve(this.completeSync(listOrReorder));\n  }\n  canStart(ev) {\n    if (this.selectedItemEl || this.state !== 0 /* Idle */) {\n      return false;\n    }\n    const target = ev.event.target;\n    const reorderEl = target.closest('ion-reorder');\n    if (!reorderEl) {\n      return false;\n    }\n    const item = findReorderItem(reorderEl, this.el);\n    if (!item) {\n      return false;\n    }\n    ev.data = item;\n    return true;\n  }\n  onStart(ev) {\n    ev.event.preventDefault();\n    const item = this.selectedItemEl = ev.data;\n    const heights = this.cachedHeights;\n    heights.length = 0;\n    const el = this.el;\n    const children = el.children;\n    if (!children || children.length === 0) {\n      return;\n    }\n    let sum = 0;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      sum += child.offsetHeight;\n      heights.push(sum);\n      child.$ionIndex = i;\n    }\n    const box = el.getBoundingClientRect();\n    this.containerTop = box.top;\n    this.containerBottom = box.bottom;\n    if (this.scrollEl) {\n      const scrollBox = this.scrollEl.getBoundingClientRect();\n      this.scrollElInitial = this.scrollEl.scrollTop;\n      this.scrollElTop = scrollBox.top + AUTO_SCROLL_MARGIN;\n      this.scrollElBottom = scrollBox.bottom - AUTO_SCROLL_MARGIN;\n    }\n    else {\n      this.scrollElInitial = 0;\n      this.scrollElTop = 0;\n      this.scrollElBottom = 0;\n    }\n    this.lastToIndex = indexForItem(item);\n    this.selectedItemHeight = item.offsetHeight;\n    this.state = 1 /* Active */;\n    item.classList.add(ITEM_REORDER_SELECTED);\n    hapticSelectionStart();\n  }\n  onMove(ev) {\n    const selectedItem = this.selectedItemEl;\n    if (!selectedItem) {\n      return;\n    }\n    // Scroll if we reach the scroll margins\n    const scroll = this.autoscroll(ev.currentY);\n    // // Get coordinate\n    const top = this.containerTop - scroll;\n    const bottom = this.containerBottom - scroll;\n    const currentY = Math.max(top, Math.min(ev.currentY, bottom));\n    const deltaY = scroll + currentY - ev.startY;\n    const normalizedY = currentY - top;\n    const toIndex = this.itemIndexForTop(normalizedY);\n    if (toIndex !== this.lastToIndex) {\n      const fromIndex = indexForItem(selectedItem);\n      this.lastToIndex = toIndex;\n      hapticSelectionChanged();\n      this.reorderMove(fromIndex, toIndex);\n    }\n    // Update selected item position\n    selectedItem.style.transform = `translateY(${deltaY}px)`;\n  }\n  onEnd() {\n    const selectedItemEl = this.selectedItemEl;\n    this.state = 2 /* Complete */;\n    if (!selectedItemEl) {\n      this.state = 0 /* Idle */;\n      return;\n    }\n    const toIndex = this.lastToIndex;\n    const fromIndex = indexForItem(selectedItemEl);\n    if (toIndex === fromIndex) {\n      this.completeSync();\n    }\n    else {\n      this.ionItemReorder.emit({\n        from: fromIndex,\n        to: toIndex,\n        complete: this.completeSync.bind(this)\n      });\n    }\n    hapticSelectionEnd();\n  }\n  completeSync(listOrReorder) {\n    const selectedItemEl = this.selectedItemEl;\n    if (selectedItemEl && this.state === 2 /* Complete */) {\n      const children = this.el.children;\n      const len = children.length;\n      const toIndex = this.lastToIndex;\n      const fromIndex = indexForItem(selectedItemEl);\n      if (toIndex !== fromIndex && (listOrReorder === undefined || listOrReorder === true)) {\n        const ref = (fromIndex < toIndex)\n          ? children[toIndex + 1]\n          : children[toIndex];\n        this.el.insertBefore(selectedItemEl, ref);\n      }\n      if (Array.isArray(listOrReorder)) {\n        listOrReorder = reorderArray(listOrReorder, fromIndex, toIndex);\n      }\n      for (let i = 0; i < len; i++) {\n        children[i].style['transform'] = '';\n      }\n      selectedItemEl.style.transition = '';\n      selectedItemEl.classList.remove(ITEM_REORDER_SELECTED);\n      this.selectedItemEl = undefined;\n      this.state = 0 /* Idle */;\n    }\n    return listOrReorder;\n  }\n  itemIndexForTop(deltaY) {\n    const heights = this.cachedHeights;\n    let i = 0;\n    // TODO: since heights is a sorted array of integers, we can do\n    // speed up the search using binary search. Remember that linear-search is still\n    // faster than binary-search for small arrays (<64) due CPU branch misprediction.\n    for (i = 0; i < heights.length; i++) {\n      if (heights[i] > deltaY) {\n        break;\n      }\n    }\n    return i;\n  }\n  /********* DOM WRITE ********* */\n  reorderMove(fromIndex, toIndex) {\n    const itemHeight = this.selectedItemHeight;\n    const children = this.el.children;\n    for (let i = 0; i < children.length; i++) {\n      const style = children[i].style;\n      let value = '';\n      if (i > fromIndex && i <= toIndex) {\n        value = `translateY(${-itemHeight}px)`;\n      }\n      else if (i < fromIndex && i >= toIndex) {\n        value = `translateY(${itemHeight}px)`;\n      }\n      style['transform'] = value;\n    }\n  }\n  autoscroll(posY) {\n    if (!this.scrollEl) {\n      return 0;\n    }\n    let amount = 0;\n    if (posY < this.scrollElTop) {\n      amount = -SCROLL_JUMP;\n    }\n    else if (posY > this.scrollElBottom) {\n      amount = SCROLL_JUMP;\n    }\n    if (amount !== 0) {\n      this.scrollEl.scrollBy(0, amount);\n    }\n    return this.scrollEl.scrollTop - this.scrollElInitial;\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        'reorder-enabled': !this.disabled,\n        'reorder-list-active': this.state !== 0 /* Idle */,\n      } }));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n};\nconst indexForItem = (element) => {\n  return element['$ionIndex'];\n};\nconst findReorderItem = (node, container) => {\n  let parent;\n  while (node) {\n    parent = node.parentElement;\n    if (parent === container) {\n      return node;\n    }\n    node = parent;\n  }\n  return undefined;\n};\nconst AUTO_SCROLL_MARGIN = 60;\nconst SCROLL_JUMP = 10;\nconst ITEM_REORDER_SELECTED = 'reorder-selected';\nconst reorderArray = (array, from, to) => {\n  const element = array[from];\n  array.splice(from, 1);\n  array.splice(to, 0, element);\n  return array.slice();\n};\nReorderGroup.style = reorderGroupCss;\n\nexport { Reorder as ion_reorder, ReorderGroup as ion_reorder_group };\n","const HapticEngine = {\n  getEngine() {\n    const win = window;\n    return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n  },\n  available() {\n    return !!this.getEngine();\n  },\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n  impact(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({ style });\n  },\n  notification(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({ style });\n  },\n  selection() {\n    this.impact({ style: 'light' });\n  },\n  selectionStart() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    }\n    else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    }\n    else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    }\n    else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n"],"sourceRoot":""}