{"version":3,"sources":["../node_modules/@ionic/core/dist/esm/ion-img.entry.js"],"names":["Img","hostRef","registerInstance","this","ionImgWillLoad","createEvent","ionImgDidLoad","ionError","onLoad","emit","onError","addIO","undefined","src","window","IntersectionObserverEntry","prototype","removeIO","io","IntersectionObserver","data","isIntersecting","load","observe","el","setTimeout","loadError","loadSrc","disconnect","h","Host","class","getIonMode","decoding","alt","part","getElement","style"],"mappings":"wNAKMA,EAAG,WACP,WAAYC,GAAS,+BACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,eAAiBC,YAAYF,KAAM,iBAAkB,GAC1DA,KAAKG,cAAgBD,YAAYF,KAAM,gBAAiB,GACxDA,KAAKI,SAAWF,YAAYF,KAAM,WAAY,GAC9CA,KAAKK,OAAS,WACZ,EAAKF,cAAcG,QAErBN,KAAKO,QAAU,WACb,EAAKH,SAASE,QAVX,yDAcLN,KAAKQ,UAdA,yCAiBLR,KAAKQ,UAjBA,8BAmBC,gBACWC,IAAbT,KAAKU,MAGa,qBAAXC,QACT,yBAA0BA,QAC1B,8BAA+BA,QAC/B,mBAAoBA,OAAOC,0BAA0BC,WACrDb,KAAKc,WACLd,KAAKe,GAAK,IAAIC,sBAAqB,SAAAC,GAI7BA,EAAK,GAAGC,iBACV,EAAKC,OACL,EAAKL,eAGTd,KAAKe,GAAGK,QAAQpB,KAAKqB,KAIrBC,YAAW,kBAAM,EAAKH,SAAQ,QAzC3B,6BA6CLnB,KAAKuB,UAAYvB,KAAKO,QACtBP,KAAKwB,QAAUxB,KAAKU,IACpBV,KAAKC,eAAeK,SA/Cf,iCAkDDN,KAAKe,KACPf,KAAKe,GAAGU,aACRzB,KAAKe,QAAKN,KApDP,+BAwDL,OAAQiB,YAAEC,IAAM,CAAEC,MAAOC,YAAW7B,OAAS0B,YAAE,MAAO,CAAEI,SAAU,QAASpB,IAAKV,KAAKwB,QAASO,IAAK/B,KAAK+B,IAAK1B,OAAQL,KAAKK,OAAQE,QAASP,KAAKuB,UAAWS,KAAM,aAxD5J,yBA0DI,OAAOC,YAAWjC,SA1DtB,gCA2DiB,MAAO,CAC7B,IAAO,CAAC,mBA5DH,KA+DTH,EAAIqC,MAjEW","file":"static/js/45.08d20627.chunk.js","sourcesContent":["import { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-e806d1f6.js';\nimport { b as getIonMode } from './ionic-global-9d5c8ee3.js';\n\nconst imgCss = \":host{display:block;-o-object-fit:contain;object-fit:contain}img{display:block;width:100%;height:100%;-o-object-fit:inherit;object-fit:inherit;-o-object-position:inherit;object-position:inherit}\";\n\nconst Img = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionImgWillLoad = createEvent(this, \"ionImgWillLoad\", 7);\n    this.ionImgDidLoad = createEvent(this, \"ionImgDidLoad\", 7);\n    this.ionError = createEvent(this, \"ionError\", 7);\n    this.onLoad = () => {\n      this.ionImgDidLoad.emit();\n    };\n    this.onError = () => {\n      this.ionError.emit();\n    };\n  }\n  srcChanged() {\n    this.addIO();\n  }\n  componentDidLoad() {\n    this.addIO();\n  }\n  addIO() {\n    if (this.src === undefined) {\n      return;\n    }\n    if (typeof window !== 'undefined' &&\n      'IntersectionObserver' in window &&\n      'IntersectionObserverEntry' in window &&\n      'isIntersecting' in window.IntersectionObserverEntry.prototype) {\n      this.removeIO();\n      this.io = new IntersectionObserver(data => {\n        // because there will only ever be one instance\n        // of the element we are observing\n        // we can just use data[0]\n        if (data[0].isIntersecting) {\n          this.load();\n          this.removeIO();\n        }\n      });\n      this.io.observe(this.el);\n    }\n    else {\n      // fall back to setTimeout for Safari and IE\n      setTimeout(() => this.load(), 200);\n    }\n  }\n  load() {\n    this.loadError = this.onError;\n    this.loadSrc = this.src;\n    this.ionImgWillLoad.emit();\n  }\n  removeIO() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  render() {\n    return (h(Host, { class: getIonMode(this) }, h(\"img\", { decoding: \"async\", src: this.loadSrc, alt: this.alt, onLoad: this.onLoad, onError: this.loadError, part: \"image\" })));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"src\": [\"srcChanged\"]\n  }; }\n};\nImg.style = imgCss;\n\nexport { Img as ion_img };\n"],"sourceRoot":""}