{"version":3,"sources":["../node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js","../node_modules/@ionic/core/dist/esm/framework-delegate-4584ab5a.js"],"names":["ViewController","component","params","this","state","container","element","attachComponent","delegate","assert","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","Object","keys","keysB","length","key","convertToView","page","Nav","hostRef","registerInstance","ionNavWillLoad","createEvent","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","gesture","enable","swipeGesture","root","setRoot","rootParams","document","querySelector","el","closest","mode","getIonMode","config","getBoolean","emit","rootChanged","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","swipeGestureChanged","lifecycle","LIFECYCLE_WILL_UNLOAD","_destroy","destroy","componentProps","opts","done","queueTrns","insertStart","insertViews","insertIndex","insertComponents","removeStart","removeCount","indexOrViewCtrl","tiConfig","removeView","startIndex","setPages","direction","animation","resolve","active","getActiveSync","Promise","changed","finish","promise","r","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","a","viewController","find","v","popTo","assign","animationBuilder","push","tagName","index","canGoBackSync","getPreviousSync","indexOf","ti","skipIfBusy","reject","router","canTransition","nextTrns","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","init","postViewInit","enteringRequiresTransition","leavingRequiresTransition","transition","success","failed","viewsLength","viewControllers","map","filter","removeEnd","i","destroyQueue","finalBalance","console","warn","insertViewAt","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","setPageHidden","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","getTimeGivenProgression","easing","progressEnd","h","getElement","style","NavLink","routerDirection","onClick","routerAnimation","pop","navLink","Host","cssClasses","attachViewToDom","HTMLElement","ownerDocument","createElement","forEach","c","classList","add","appendChild","componentOnReady","detachComponent"],"mappings":"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","file":"static/js/15.6b6ad2b3.chunk.js","sourcesContent":["import { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-e806d1f6.js';\nimport { b as getIonMode, c as config } from './ionic-global-9d5c8ee3.js';\nimport { i as assert } from './helpers-002e4980.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-35146240.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-eea9a7a9.js';\nimport { a as attachComponent } from './framework-delegate-4584ab5a.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  const currentParams = view.params;\n  if (currentParams === params) {\n    return true;\n  }\n  if (!currentParams && !params) {\n    return true;\n  }\n  if (!currentParams || !params) {\n    return false;\n  }\n  const keysA = Object.keys(currentParams);\n  const keysB = Object.keys(params);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  // Test for A's keys different from B.\n  for (const key of keysA) {\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, (page.componentProps === null) ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter =\n      !!document.querySelector('ion-router') &&\n        !this.el.closest('[no-router]');\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back-53c5a7dd.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    // release swipe back gesture and transition\n    this.transInstr.length = this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: -1,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts\n    }, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const tiConfig = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      tiConfig.removeView = indexOrViewCtrl;\n      tiConfig.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      tiConfig.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(tiConfig, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.queueTrns({\n      removeStart: 1,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    if (opts == null) {\n      opts = {};\n    }\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /** @internal */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n    let resolve;\n    const promise = new Promise(r => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          }\n        });\n        return p;\n      }\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      const viewController = this.views.find(v => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /** @internal */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    return active\n      ? {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element\n      }\n      : undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  getActive() {\n    return Promise.resolve(this.getActiveSync());\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  getByIndex(index) {\n    return Promise.resolve(this.views[index]);\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  canGoBack(view) {\n    return Promise.resolve(this.canGoBackSync(view));\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  getPrevious(view) {\n    return Promise.resolve(this.getPreviousSync(view));\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n  // 1. _nextTrns(): consumes the next transition in the queue\n  // 2. _viewInit(): initializes enteringView if required\n  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n  // 4. _postViewInit(): add/remove the views from the navigation stack\n  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n  // 8. _transitionFinish(): called once the transition finishes\n  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n  async queueTrns(ti, done) {\n    if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n      return Promise.resolve(false);\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return Promise.resolve(false);\n        }\n        else if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return Promise.resolve(false);\n        }\n      }\n    }\n    // Normalize empty\n    if (ti.insertViews && ti.insertViews.length === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now\n    // get the next instruction\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n        enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView && enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      const result = requiresTransition\n        ? await this.transition(enteringView, leavingView, ti)\n        : {\n          // transition is not required, so we are already done!\n          // they're inserting/removing the views somewhere in the middle or\n          // beginning, so visually nothing needs to animate/transition\n          // resolve immediately because there's no animation that's happening\n          hasCompleted: true,\n          requiresTransition: false\n        };\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    const viewsLength = this.views.length;\n    ti.opts = ti.opts || {};\n    if (ti.opts.delegate === undefined) {\n      ti.opts.delegate = this.delegate;\n    }\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition =\n        ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  getEnteringView(ti, leavingView) {\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      // grab the very last view of the views to be inserted\n      // and initialize it as the new entering view\n      return insertViews[insertViews.length - 1];\n    }\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  postViewInit(enteringView, leavingView, ti) {\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    const opts = ti.opts;\n    const insertViews = ti.insertViews;\n    const removeStart = ti.removeStart;\n    const removeCount = ti.removeCount;\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = 0; i < removeCount; i++) {\n        const view = this.views[i + removeStart];\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      opts.direction = opts.direction || 'back';\n    }\n    const finalBalance = this.views.length +\n      (insertViews !== undefined ? insertViews.length : 0) -\n      (removeCount !== undefined ? removeCount : 0);\n    assert(finalBalance >= 0, 'final balance can not be negative');\n    if (finalBalance === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // there are views to insert\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        opts.direction = opts.direction || 'forward';\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation\n      ? (ani) => this.sbAni = ani\n      : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts);\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    const cleanupView = hasCompleted ? enteringView : leavingView;\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      // this view is already in the stack!!\n      // move it to its new location\n      assert(view.nav === this, 'view is not part of the nav');\n      views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      // insert the entering view into the correct index in the stack\n      views.splice(index, 0, view);\n    }\n  }\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * DOM WRITE\n   */\n  cleanup(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts: {\n        direction: 'back',\n        progressAnimation: true\n      }\n    }, undefined);\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return (h(\"slot\", null));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n  const nav = el.closest('ion-nav');\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'back') {\n      return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\n    }\n  }\n  return Promise.resolve(false);\n};\n\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n    };\n  }\n  render() {\n    return (h(Host, { onClick: this.onClick }));\n  }\n  get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n","const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n  if (delegate) {\n    return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n  }\n  if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n    throw new Error('framework delegate is missing');\n  }\n  const el = (typeof component === 'string')\n    ? container.ownerDocument && container.ownerDocument.createElement(component)\n    : component;\n  if (cssClasses) {\n    cssClasses.forEach(c => el.classList.add(c));\n  }\n  if (componentProps) {\n    Object.assign(el, componentProps);\n  }\n  container.appendChild(el);\n  if (el.componentOnReady) {\n    await el.componentOnReady();\n  }\n  return el;\n};\nconst detachComponent = (delegate, element) => {\n  if (element) {\n    if (delegate) {\n      const container = element.parentElement;\n      return delegate.removeViewFromDom(container, element);\n    }\n    element.remove();\n  }\n  return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n"],"sourceRoot":""}